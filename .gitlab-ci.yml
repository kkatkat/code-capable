stages:
- build
- test
- e2e
- vulnerability_scan
- build_images

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

.build:
  image: node:21
  only:
  - main
  stage: build
  script:
  - echo "Build job started..."
  - npm install -g @nestjs/cli
  # Problem microservice
  - cd problem-microservice
  - npm install
  - npm run build
  # Runner microservice
  - cd ../runner-microservice
  - npm install
  - npm run build
  # User microservice
  - cd ../user-microservice
  - npm install
  - npm run build
  # Frontend
  - cd ../frontend
  - npm install
  - npm run build

.test:
  image: node:21
  only:
  - main
  stage: test
  script:
  - echo "Test job started..."
  - npm install -g @nestjs/cli
  # Problem microservice
  - cd problem-microservice
  - npm install
  - npm run test:cov
  # Runner microservice
  - cd ../runner-microservice
  - npm install
  - npm run test:cov
  # User microservice
  - cd ../user-microservice
  - npm install
  - npm run test:cov


.e2e:
  only:
  - main
  stage: e2e
  image: docker
  services:
    - docker:dind
  script:
  - echo "E2E job started..."
  - cp .env.compose.example .env.compose
  - docker compose down -v # clear any cached volumes
  - docker compose up -d
  - docker exec playwright sh -c "pwd" # Verify that the playwright container
  - docker exec playwright sh -c "ls"  # properly mounted the frontend directory
  - docker exec playwright sh -c "npm install"
  - docker exec playwright sh -c "npx playwright test"

vulnerability_scan:
  only:
  - main
  stage: vulnerability_scan
  image: docker
  services:
    - docker:dind
  before_script:
  - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
  - apk add --update curl
  - curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
  - apk del curl
  - rm -rf /var/cache/apk/*
  script:
  - echo "Vulnerability scan job started..."
  - cd frontend
  - docker build -t frontend --build-arg PORT=3333 --build-arg GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID .
  - docker scout cves frontend --exit-code

.build_images:
  only:
  - main
  stage: build_images
  image: docker
  services:
    - docker:dind
  script:
  - echo "Build docker images job started..."
  - docker login -u $DOCKER_USER -p $DOCKER_TOKEN
  # Frontend
  - cd frontend
  - docker build -t $DOCKER_USER/frontend --build-arg PORT=3333 --build-arg GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID .
  - docker push $DOCKER_USER/frontend
  # Problem microservice
  - cd ../problem-microservice
  - docker build -t $DOCKER_USER/problem-ms .
  - docker push $DOCKER_USER/problem-ms
  # Runner microservice
  - cd ../runner-microservice
  - docker build -t $DOCKER_USER/runner-ms .
  - docker push $DOCKER_USER/runner-ms
  # User microservice
  - cd ../user-microservice
  - docker build -t $DOCKER_USER/user-ms .
  - docker push $DOCKER_USER/user-ms


  